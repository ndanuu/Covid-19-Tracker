{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","assets/image/image.png","logo.svg"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","borderColor","fill","backgroundColor","barChart","label","options","legend","display","title","text","CountryPicker","handleCountryChange","search","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.508ee236.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1iogh\",\"card\":\"Cards_card__2u2Eh\",\"infected\":\"Cards_infected__16ImS\",\"recovered\":\"Cards_recovered__1eF37\",\"deaths\":\"Cards_deaths__2M3nS\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\n\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n  \r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card}  xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n                <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"/>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid item component={Card}  xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n            <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"/>\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n            {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid item component={Card}  xs={12} md={3}  className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\"><CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"/></Typography>\r\n            <Typography color=\"textSecondary\">\r\n            {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">Number deaths caused by COVID-19</Typography>\r\n\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from 'axios'\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n//  Fetch DailyData For each country\r\n export const fetchData = async (country) => {\r\n     let changeableUrl = url;\r\n\r\n     if(country){\r\n         changeableUrl = `${url}/countries/${country}`\r\n     }\r\n    try {\r\n        const {data: {confirmed,recovered,deaths,lastUpdate}} = await axios.get(changeableUrl);\r\n\r\n        return{ confirmed, recovered, deaths,lastUpdate};\r\n      \r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n    }\r\n\r\n}\r\n// Total DailyData for Charts\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n\r\n\r\n        }));\r\n        return modifiedData;\r\n    }\r\n    catch(error) {}\r\n}\r\n//  Fetch All Countries\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data: { countries}} = await axios.get(`${url}/countries`);\r\n        \r\n        return countries.map((country) => country.name);\r\n\r\n    }catch (error) {\r\n        console.log(error);\r\n\r\n    }\r\n}","import React, {useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data: {confirmed, deaths, recovered}, country}) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n// in class component\r\n    // state = {\r\n    //     dailyData: {}\r\n    // }\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData (await fetchDailyData());\r\n        }\r\n        \r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length \r\n        ? (\r\n        <Line\r\n        data={{\r\n            labels: dailyData.map(({date}) => date),\r\n            datasets: [{\r\n                data: dailyData.map(({confirmed}) => confirmed),\r\n                labels: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n            }, {\r\n                \r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    labels: 'deaths',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    borderColor: 'red',\r\n                    fill: true,\r\n                \r\n\r\n            }],\r\n        }}/>) : null\r\n\r\n    );\r\n    // console.log(confirmed, recovered, deaths);\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ? (\r\n            <Bar\r\n            data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                    label: 'People',\r\n                    backgroundColor: [\r\n                    'rgba(0,0,255,0.5)',\r\n                    'rgba(0,255,0,0.5)',\r\n                    'rgba(255,0,0,0.5)'],\r\n                    data:[confirmed.value, recovered.value, deaths.value]\r\n                }]\r\n\r\n            }}\r\n            options={{\r\n                legend:{display: false},\r\n                title: {display: true, text: `Current state in ${country}`}\r\n            }}/>\r\n        ) : null\r\n    )\r\n    return ( \r\n        <div className={styles.container}>\r\n           {country ? barChart : lineChart}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl,} from '@material-ui/core';\r\nimport {fetchCountries} from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({handleCountryChange,search}) => {\r\n    const [fetchedCountries, setFetchedCountries] =useState([]);\r\n    \r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    \r\n    \r\n\r\n    return ( \r\n        <div>\r\n           <FormControl className={styles.formControl}>\r\n               <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)} value= {search}>\r\n                   <option value=\"\">Global</option>\r\n                   {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n               </NativeSelect>\r\n           </FormControl>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default CountryPicker;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Cards, Chart, CountryPicker} from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImage from './assets/image/image.png';\n\nclass App extends Component {\n  state = { \n    data: {},\n    country: '',\n  \n    \n   }\n\n   async componentDidMount(){\n    const fetchedData = await fetchData();\n\n    this.setState({data: fetchedData});\n\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    console.log(fetchedData);\n    this.setState({data: fetchedData, country: country});\n\n    \n\n  }\n  \n  render() {\n    \n    const {data, country} =this.state;\n    \n\n    \n    return ( \n      <div className={styles.container} >\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\n       <Cards data = {data}/>\n       <CountryPicker handleCountryChange={this.handleCountryChange}/>\n       <Chart data={data} country={country}/>\n      \n      </div>\n     );\n  }\n}\n \nexport default App;  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__xp1pO\",\"image\":\"App_image__2CCLl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3nRrJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__156GQ\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}